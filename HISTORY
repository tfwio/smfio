

Version History
------------------

Goal(s)

- MThd.Division as timecode (E.G. SMPTE compatible delta-times)
- consolidate, refactor
- examples, utility features (like a console-app)
- MIDI Format 1 to Format 0 (in memory)
- Writer (file export/write, various message-wrappers, smfio.view)

0.2.2

- Tempo Map: accept (calculating time) cases where
  first SetTempo event comes at `pulse > 0`.
  Ineternally, we read all the tracks before re-calculating
  (`.Finalize()`) so that we know just how long the
  midi file is.
- Added Metadata String recognition of additional
  undocumented Metadata Status Message Events.
  0xFF08 to 0xFF0C.
- Switched Metadata String (parser/reader) Encoding
  to that of the System.Text.Encoding.Default since
 'it just works' better as opposed to UTF-8. It just
  seems to be used by the majority of midi files I'd
  encountered.
- Rename IMidiReader/IMidiParser to IReader/IParser.
- Fix EnumFile usage.
  Prior transitory usage failed in cases when
  drag-dropping a file into the application and the CWD
  seems to be that of the incoming file in which case
  the app can't find the external text files containing
  human readable instrument patches, etc.


0.2.1

- read SMPTE Offset

0.2.0

version bump is due to generally re-writing much
code surrounding the context of a status message
in the parser.  New classes have either been added
or renamed/reworked in this regard and this likely
will break any prior dependent source(s).

- System Exclusive messages are proper and working.
- Sequencer Specific Metadata is now working.
- the parser is quite a bit more comprehensive.
  Before, it was just a frigging nightmare trying
  to understand just why the H the default
  message-status was converted to something that
  looked like a meta-message before passing it
  along to other parse ops.
- MTrk now takes on a bit more responsibility
- StatRange, StatusQuery and several other status-message
  utilities are now working comprehensively and smooth.

0.1.4

- Fix modest related timing issue(s)
- Use TimeUtil const (opposed to multiple const references or inlining)
- add MusPQN to ITimeConfiguration
- Fix SampleClock: set tempo (private field) from MusPQN setter and vice/vs
- windows batch files for msys bash (added `#! cmd /c` to head)

0.1.3

- re-introduce modest-vst dependencies:  
  NoteParser derived on SmfReader

0.1.2

- tempo map & state
- simplify time calculations  
  Old SampleClock MTC and IClock classes are obsoleted.
- refactor/rename params/props of what is now Events.cs  
  see: MidiEventDelegate and MidiMessageEvent (and similarly derived functions)
- using long (vs ulong) for delta pulse in reader & events

0.1.1

- Removed a lot of un-used code
- Application of more comprehensive Endian utility
- Slight change of (interface) IMidiParser and its impl,
  and possibly other interfaces/impl.
- Tempo changes are collected (albeit it needs work)
  to `List<TempoChange>`.  
  TODO: changes are expected to soon reflect in `MidiReader`'s
  (`DictionaryList<int,MidiMessage> MidiDataList`)
  or perhaps some kind of wrapper that is more
  user-friendly when it comes to yielding adequate
  timing in Samples or Seconds.  
  Or at the very least there will be examples
  showing how to obtain adequate time info.

0.1.0

- Initial Dump
- Semantic versioning starts here.
- namespace (title) and other refactoring.
- The project is from around 2005, reworked
  into a prototypical VSTHost to test the engine.
- lacking feature: lacking SetTempo message support.
